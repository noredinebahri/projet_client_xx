pool:
  name: GeDaS-Build
trigger:
- dev
- release

variables:
- name: DEV_BACKEND_URL
  value: "https://psm-dev.gedas.test.azure.xxxxxxxx.de"
- name: PROD_BACKEND_URL
  value: "https://psm.gedas.test.azure.xxxxxxxx.de"

resources:
  repositories:
    - repository: psm-client
      type: githubenterprise
      endpoint: Git DHL Jonas PAT
      name: GeDaS-Geodatensystem/psm-client
      ref: $(Build.SourceBranch)
    - repository: psm-editor
      type: githubenterprise
      endpoint: Git DHL Jonas PAT
      name: GeDaS-Geodatensystem/psm-editor
      ref: $(Build.SourceBranch)
stages:
  - stage: PSM_Client_Build_SNAPSHOT
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
    jobs:
      - job: BUILD
        steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'GeDaS Resources'
              KeyVaultName: 'gedas-npi-kv1'
              SecretsFilter: '*'
              RunAsPreJob: true
          - script: 'echo "$(PIPELINE-css-qhcr-robot-gedas)" | docker login -u css_qhcr_robot_gedas --password-stdin dpdhl.css-qhcr-pi.azure.xxxxxxxx.de'
            displayName: Login to Docker Registry

          - checkout: psm-client
            clean: true
            fetchDepth: 0
          - checkout: psm-editor
            clean: true
            fetchDepth: 0

          - script: |
              cd psm-client
              chmod +x ./ci-cd/get-package-version.sh
              echo "##vso[task.setvariable variable=PSM_CLIENT_VERSION]$(./ci-cd/get-package-version.sh)"
            displayName: 'Get PSM Client Version'

          - script: |
              cd psm-editor
              chmod +x ./CI/get-package-version.sh
              echo "##vso[task.setvariable variable=PSM_EDITOR_VERSION]$(./CI/get-package-version.sh)"
            displayName: 'Get PSM EDITOR Version'

          - script: |
              echo "DEV-Backend: ${{ variables.DEV_BACKEND_URL }}"
              echo "##vso[task.setvariable variable=PSM_BACKEND_URL]${{ variables.DEV_BACKEND_URL }}"
            displayName: Set Backend URL
            
          - script: |
              APIKEY="$(lcm-artifactory-key)"
              curl -H "X-JFrog-Art-Api:${APIKEY}" https://lcm.xxxxxxxx.de/artifactory/ITR-3687_GEDAS_release_reports/psm-frontend/psm-client.$(PSM_CLIENT_VERSION)-SNAPSHOT.tar.gz -O
              tar -xf psm-client.$(PSM_CLIENT_VERSION)-SNAPSHOT.tar.gz --one-top-level=dist-psm-client
            displayName: Download and prepare psm-client.$(PSM_CLIENT_VERSION).tar.gz from artifactory

          - script: |
              APIKEY="$(lcm-artifactory-key)"
              curl -H "X-JFrog-Art-Api:${APIKEY}" https://lcm.xxxxxxxx.de/artifactory/ITR-3687_GEDAS_release_reports/psm-frontend/psm-editor.$(PSM_EDITOR_VERSION)-SNAPSHOT.tar.gz -O
              tar -xf psm-editor.$(PSM_EDITOR_VERSION)-SNAPSHOT.tar.gz --one-top-level=dist-psm-editor
            displayName: Download and prepare psm-editor.$(PSM_EDITOR_VERSION).tar.gz from artifactory

          - script: |
              tmp=$(mktemp)
              jq --arg a "$(PSM_BACKEND_URL)" '.psmBackendUrl = $a' dist-psm-client/dist/psm-client/config.json > "$tmp" && mv "$tmp" dist-psm-client/dist/psm-client/config.json
            displayName: Set Backend URL in Client

          - script: |
              sed -i '/window.gedas.psmBackendUrl/c\window.gedas.psmBackendUrl = \"$(PSM_BACKEND_URL)\"\; \/\/ modified by ci' ./dist-psm-editor/dist/index.html
            displayName: Set Backend URL in Editor

          - script: 'docker build -f ./psm-client/ci-cd/nginx.Dockerfile -t dpdhl.css-qhcr-pi.azure.xxxxxxxx.de/gedas/psm-client:$(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION)-$(Build.BuildNumber) . '
            displayName: Build psm client image version $(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION)
         
          # load css_qhcr_robot_gedas private key
          - script: |
                  docker trust key load ~/.docker/trust/private/71782ddf4966e5d23b8f153bc33893e0d40101c7be71cc68e0cd52518a0466e8.key
                  docker trust sign dpdhl.css-qhcr-pi.azure.xxxxxxxx.de/gedas/psm-client:$(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION)-$(Build.BuildNumber)
                  docker trust inspect --pretty dpdhl.css-qhcr-pi.azure.xxxxxxxx.de/gedas/psm-client:$(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION)-$(Build.BuildNumber)
            displayName: Sign and push Image to Harbor dpdhl.css-qhcr-pi.azure.xxxxxxxx.de
            env:
              # important: repository passphrase is used to decrpyt the loaded docker trust key and equals the admin key, for repo key check keyvault
              DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: $(css-imagesign-root-passphrase)
              DOCKER_CONTENT_TRUST_SERVER: https://dpdhl.css-qhcr-pi.azure.xxxxxxxx.de:4443
              DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE: $(css-imagesign-root-passphrase)
  
  - stage: PSM_Client_Build_RELEASE
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/release')
    jobs:
      - job: BUILD
        steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'GeDaS Resources'
              KeyVaultName: 'gedas-npi-kv1'
              SecretsFilter: '*'
              RunAsPreJob: true
          - script: 'echo "$(PIPELINE-css-qhcr-robot-gedas)" | docker login -u css_qhcr_robot_gedas --password-stdin dpdhl.css-qhcr-pi.azure.xxxxxxxx.de'
            displayName: Login to Docker Registry

          - checkout: psm-client
            clean: true
            fetchDepth: 0
          - checkout: psm-editor
            clean: true
            fetchDepth: 0

          - script: |
              cd psm-client
              chmod +x ./ci-cd/get-package-version.sh
              echo "##vso[task.setvariable variable=PSM_CLIENT_VERSION]$(./ci-cd/get-package-version.sh)"
            displayName: 'Get PSM Client Version'

          - script: |
              cd psm-editor
              chmod +x ./CI/get-package-version.sh
              echo "##vso[task.setvariable variable=PSM_EDITOR_VERSION]$(./CI/get-package-version.sh)"
            displayName: 'Get PSM EDITOR Version'

          - script: |
              echo "PROD-Backend: ${{ variables.PROD_BACKEND_URL }}"
              echo "##vso[task.setvariable variable=PSM_BACKEND_URL]${{ variables.PROD_BACKEND_URL }}"
            displayName: Set Backend URL
          - script: |
              APIKEY="$(lcm-artifactory-key)"
              curl -H "X-JFrog-Art-Api:${APIKEY}" https://lcm.xxxxxxxx.de/artifactory/ITR-3687_GEDAS_release_reports/psm-frontend/psm-client.$(PSM_CLIENT_VERSION).tar.gz -O
              tar -xf psm-client.$(PSM_CLIENT_VERSION).tar.gz --one-top-level=dist-psm-client
            displayName: Download and prepare psm-client.$(PSM_CLIENT_VERSION).tar.gz from artifactory

          - script: |
              APIKEY="$(lcm-artifactory-key)"
              curl -H "X-JFrog-Art-Api:${APIKEY}" https://lcm.xxxxxxxx.de/artifactory/ITR-3687_GEDAS_release_reports/psm-frontend/psm-editor.$(PSM_EDITOR_VERSION).tar.gz -O
              tar -xf psm-editor.$(PSM_EDITOR_VERSION).tar.gz --one-top-level=dist-psm-editor
            displayName: Download and prepare psm-editor.$(PSM_EDITOR_VERSION).tar.gz from artifactory

          - script: |
              tmp=$(mktemp)
              jq --arg a "$(PSM_BACKEND_URL)" '.psmBackendUrl = $a' dist-psm-client/dist/psm-client/config.json > "$tmp" && mv "$tmp" dist-psm-client/dist/psm-client/config.json
            displayName: Set Backend URL in Client

          - script: |
              sed -i '/window.gedas.psmBackendUrl/c\window.gedas.psmBackendUrl = \"$(PSM_BACKEND_URL)\"\; \/\/ modified by ci' ./dist-psm-editor/dist/index.html
            displayName: Set Backend URL in Editor

          - script: 'docker build -f ./psm-client/ci-cd/nginx.Dockerfile -t dpdhl.css-qhcr-pi.azure.xxxxxxxx.de/gedas/psm-client:$(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION) . '
            displayName: Build psm client image version $(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION)
         
          # load css_qhcr_robot_gedas private key
          - script: |
                  docker trust key load ~/.docker/trust/private/71782ddf4966e5d23b8f153bc33893e0d40101c7be71cc68e0cd52518a0466e8.key
                  docker trust sign dpdhl.css-qhcr-pi.azure.xxxxxxxx.de/gedas/psm-client:$(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION)
                  docker trust inspect --pretty dpdhl.css-qhcr-pi.azure.xxxxxxxx.de/gedas/psm-client:$(PSM_CLIENT_VERSION)-editor-$(PSM_EDITOR_VERSION)
            displayName: Sign and push Image to Harbor dpdhl.css-qhcr-pi.azure.xxxxxxxx.de
            env:
              # important: repository passphrase is used to decrpyt the loaded docker trust key and equals the admin key, for repo key check keyvault
              DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: $(css-imagesign-root-passphrase)
              DOCKER_CONTENT_TRUST_SERVER: https://dpdhl.css-qhcr-pi.azure.xxxxxxxx.de:4443
              DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE: $(css-imagesign-root-passphrase)

